package com.example.demo.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import com.example.Entity.User;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.Repository.UserRepository;
import com.example.demo.model.LoginRequest;
import com.example.demo.model.RegisterRequest;
import com.example.demo.security.jwtTokenProvider;
import com.example.demo.service.UserService;

@RestController
@CrossOrigin(origins = "http://localhost:5173") // Allow requests from this frontend URL
@RequestMapping("/auth")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private jwtTokenProvider jwtTokenProvider;

    @Autowired
    private UserService userService;
    
    @Autowired
    private UserRepository userRepository;
    
 

    // Handle login request
//    @PostMapping("/auth/login")
//    public ResponseEntity<?> authenticateUser(@RequestBody LoginRequest loginRequest) {
//        try {
//            Authentication authentication = authenticationManager.authenticate(
//                new UsernamePasswordAuthenticationToken(
//                    loginRequest.getEmail(),
//                    loginRequest.getPassword()
//                )
//            );
//
//            if (authentication.isAuthenticated()) {
//                System.out.println("User authenticated successfully");
//            } else {
//                System.out.println("Authentication failed");
//            }
//            
//            
//            
//            SecurityContextHolder.getContext().setAuthentication(authentication);
//
//            String jwt = jwtTokenProvider.generateToken(authentication);
//            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
//            String role = userDetails.getRole();
//
//            return ResponseEntity.ok(new JwtResponse(jwt, role)); // Return token and role
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
//        }
//    }
    
    @PostMapping("/auth/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
        // Authenticate user with provided credentials
        Authentication authentication = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(loginRequest.getEmail(), loginRequest.getPassword())
        );

        // Set authentication in the security context
        SecurityContextHolder.getContext().setAuthentication(authentication);

        // Generate JWT token
        String token = jwtTokenProvider.generateToken(authentication);

        // Use the autowired repository to find the user
        User user = userRepository.findByEmail(loginRequest.getEmail())
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        // Retrieve the role from the User entity
        User.Role role = user.getRole(); // Assuming Role is properly mapped in the database

        // Return token and role in the response
        return ResponseEntity.ok(Map.of(
            "token", token,
            "role", role.toString() // Convert enum to string
        ));
    }

    // Handle register request
    @PostMapping("/auth/register")
    public ResponseEntity<?> registerUser(@RequestBody RegisterRequest registerRequest) {
        // Check if user already exists
        if (userService.existsByEmail(registerRequest.getEmail())) {
            return ResponseEntity.badRequest().body("Email is already taken!");
        }

        // Save new user (password will be encoded)
        userService.registerUser(registerRequest);
//        System.out.println("User role: " + User.getRole());

        return ResponseEntity.ok("User registered successfully!");
    }
}
