package com.example.demo.security;

import java.util.Date;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Component
public class jwtTokenProvider {

	 @Value("${jwt.secret}")  // Inject secret key from properties file
	    private String SECRET_KEY; // Replace with your secret key
    private final long EXPIRATION_TIME = 86400000L;  // 24 hours in milliseconds

    // Method to generate JWT token
    public String generateToken(Authentication authentication) {
        // Ensure the principal is an instance of UserDetailsImpl
        UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();

        return Jwts.builder()
                .setSubject(userPrincipal.getUsername())  // Use getUsername from UserDetailsImpl
                .claim("role", userPrincipal.getRole())   // Use getRole from UserDetailsImpl
                .setIssuedAt(new Date())                  // Set issue date
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))  // Set expiration date
                .signWith(SignatureAlgorithm.HS512, SECRET_KEY)  // Sign the token with the secret key
                .compact();  // Generate the compact token string
    }


    // Method to validate JWT token
    public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token);  // Parse the token and validate its signature
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // Method to extract username from JWT token
    public String getUsernameFromToken(String token) {
        return Jwts.parser()
                .setSigningKey(SECRET_KEY)
                .parseClaimsJws(token)
                .getBody()
                .getSubject();  // Get the username (subject) from token
    }
}
